---
import { TableOfContents as Icon } from "lucide-astro";
interface Heading {
  depth: number; // The heading level (h1 = 1, h2 = 2, etc)
  slug: string; // The ID of the heading for linking
  text: string; // The text content of the heading
}

interface Props {
  headings: Heading[]; // Array of headings from your markdown content
  levels?: 1 | 2 | 3; // How many levels of headers to show in TOC (default: 2)
}
const { headings, levels = 2 } = Astro.props as Props;

// Filter headings to only show up to the specified level
const filteredHeadings = headings.filter((heading) => heading.depth <= levels);
---

<div class="space-y-2">
  <h1 class="font-mono font-bold uppercase flex items-center gap-2">
    <Icon />
    Table of contents
  </h1><ul class="space-y-2 font-mono tracking-tighter">
    {
      filteredHeadings.map((heading, index) => (
        <li
          class:list={{
            "pl-4": heading.depth === 3,
            "pl-6": heading.depth === 4,
          }}
        >
          <a
            href={`#${heading.slug}`}
            class="toc-link transition hover:text-ctp-sky"
          >
            {heading.text}
          </a>
        </li>
      ))
    }
  </ul>
</div>

<script>
  // Wrapper for Blog post content
  let wrappingElement: Element | null;
  let observeHeaderTags: IntersectionObserver;
  let allHeaderTags: NodeListOf<Element>;

  // Function that runs when the Intersection Observer fires
  function setCurrent(e: IntersectionObserverEntry[]) {
    console.log("setCurrent called", e);
    var allSectionLinks = document.querySelectorAll(".toc-link");
    e.map((i) => {
      if (i.isIntersecting === true) {
        allSectionLinks.forEach((link) => link.classList.remove("toc-current"));
        const targetLink = document.querySelector(
          `a[href="#${i.target.id}"].toc-link`,
        );

        if (targetLink) targetLink.classList.add("toc-current");
      }
    });
  }

  function initTOC() {
    console.log("initTOC called");
    // update this with whatever class wraps your blog post content
    wrappingElement = document.querySelector("article");
    if (wrappingElement !== null) {
      // Get all H1/H2/H3 tags from the post
      allHeaderTags = wrappingElement.querySelectorAll(
        ":scope > h1, :scope > h2, :scope > h3",
      );
      console.log("All header tags found:", allHeaderTags);
    }

    // Intersection Observer Options
    let options: IntersectionObserverInit = {
      root: null,
      rootMargin: "0px 0px -50% 0px",
      threshold: [1],
    };

    // Each Intersection Observer runs setCurrent
    observeHeaderTags = new IntersectionObserver(setCurrent, options);
    if (wrappingElement === null) {
      return;
    }
    allHeaderTags.forEach((tag) => {
      console.log("Observing tag:", tag);
      // add scroll margin top to account for fixed navbar
      tag.classList.add("scroll-mt-24");
      observeHeaderTags.observe(tag);
    });
  }

  // runs on initial page load
  initTOC();

  // runs on view transitions navigation
  document.addEventListener("astro:after-swap", initTOC);
</script>
